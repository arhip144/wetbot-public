const fs = require('fs');
const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  langFile: './config/lang.json',
  targetLanguages: ['en-US', 'uk', 'es-ES', 'ru'], // –Ø–∑—ã–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
  sourceLanguage: 'ru', // –ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–æ–≤
  batchSize: 10, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —Ä–∞–∑
  delayBetweenBatches: 1000 // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞—á–∫–∞–º–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ (–º—Å)
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
async function translateText(text, targetLang, sourceLang = config.sourceLanguage) {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π Google Translate API
    const response = await axios.get('https://translate.googleapis.com/translate_a/single', {
      params: {
        client: 'gtx',
        sl: sourceLang,
        tl: targetLang,
        dt: 't',
        q: text
      }
    });

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
    const translatedText = response.data[0][0][0];
    return translatedText;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ "${text}" –Ω–∞ ${targetLang}:`, error.message);
    return null;
  }
}

// –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –ß—Ç–µ–Ω–∏–µ lang.json
function readLangFile() {
  try {
    const data = fs.readFileSync(config.langFile, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è lang.json:', error.message);
    process.exit(1);
  }
}

// –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤ —Å –ø—É—Å—Ç—ã–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
function findEmptyTranslations(langData) {
  const emptyTranslations = [];
  const translations = langData.translations || {};

  for (const [textId, translationsObj] of Object.entries(translations)) {
    for (const lang of config.targetLanguages) {
      // –ò—â–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö
      if (translationsObj[lang] === "" || translationsObj[lang] === '""') {
        emptyTranslations.push({
          textId,
          lang,
          originalText: textId
        });
      }
    }
  }

  return emptyTranslations;
}

// –ü–µ—Ä–µ–≤–æ–¥ –ø–∞—á–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤
async function translateBatch(batch) {
  const results = [];

  for (const item of batch) {
    console.log(`üî§ –ü–µ—Ä–µ–≤–æ–¥ "${item.originalText.substring(0, 50)}..." –Ω–∞ ${item.lang}`);
    
    const translated = await translateText(item.originalText, item.lang);
    
    if (translated) {
      results.push({
        ...item,
        translatedText: translated
      });
      console.log(`‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: "${translated.substring(0, 50)}..."`);
    } else {
      results.push({
        ...item,
        translatedText: "" // –û—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
      });
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞, –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø—É—Å—Ç—ã–º`);
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await sleep(200);
  }

  return results;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
async function translateAll() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –ü–ï–†–ï–í–û–î–ê –ü–£–°–¢–´–• –°–¢–†–û–ö');
  console.log('========================================');

  // –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
  const langData = readLangFile();
  const translations = langData.translations || {};

  // –ü–æ–∏—Å–∫ –ø—É—Å—Ç—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
  const emptyTranslations = findEmptyTranslations(langData);
  
  if (emptyTranslations.length === 0) {
    console.log('‚úÖ –ü—É—Å—Ç—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
    return;
  }

  console.log(`üìù –ù–∞–π–¥–µ–Ω–æ –ø—É—Å—Ç—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${emptyTranslations.length}`);

  // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–∞—á–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
  const batches = [];
  for (let i = 0; i < emptyTranslations.length; i += config.batchSize) {
    batches.push(emptyTranslations.slice(i, i + config.batchSize));
  }

  let translatedCount = 0;
  let errorCount = 0;

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–∞—á–∫—É
  for (let i = 0; i < batches.length; i++) {
    console.log(`\nüì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—á–∫–∏ ${i + 1}/${batches.length}`);
    
    const batchResults = await translateBatch(batches[i]);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –¥–∞–Ω–Ω—ã—Ö
    for (const result of batchResults) {
      if (result.translatedText && result.translatedText !== "") {
        if (!translations[result.textId]) {
          translations[result.textId] = {};
        }
        translations[result.textId][result.lang] = result.translatedText;
        translatedCount++;
      } else {
        errorCount++;
      }
    }

    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞—á–∫–∞–º–∏
    if (i < batches.length - 1) {
      console.log(`‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ ${config.delayBetweenBatches}–º—Å...`);
      await sleep(config.delayBetweenBatches);
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  langData.translations = translations;
  fs.writeFileSync(config.langFile, JSON.stringify(langData, null, 2), 'utf8');

  console.log('\n========================================');
  console.log(`‚úÖ –ü–ï–†–ï–í–û–î –ó–ê–í–ï–†–®–ï–ù!`);
  console.log(`üìä –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: ${translatedCount}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–∞: ${errorCount}`);
  console.log(`üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${config.langFile}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞
async function translateSpecificLanguage(targetLang) {
  console.log(`üöÄ –ü–ï–†–ï–í–û–î –ü–£–°–¢–´–• –°–¢–†–û–ö –ù–ê ${targetLang}`);
  console.log('========================================');

  const langData = readLangFile();
  const translations = langData.translations || {};

  const emptyTranslations = [];
  for (const [textId, translationsObj] of Object.entries(translations)) {
    if (translationsObj[targetLang] === "" || translationsObj[targetLang] === '""') {
      emptyTranslations.push({
        textId,
        lang: targetLang,
        originalText: textId
      });
    }
  }

  if (emptyTranslations.length === 0) {
    console.log(`‚úÖ –ü—É—Å—Ç—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞ ${targetLang} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!`);
    return;
  }

  console.log(`üìù –ù–∞–π–¥–µ–Ω–æ –ø—É—Å—Ç—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞ ${targetLang}: ${emptyTranslations.length}`);

  const batches = [];
  for (let i = 0; i < emptyTranslations.length; i += config.batchSize) {
    batches.push(emptyTranslations.slice(i, i + config.batchSize));
  }

  let translatedCount = 0;
  let errorCount = 0;

  for (let i = 0; i < batches.length; i++) {
    console.log(`\nüì¶ –ü–∞—á–∫–∞ ${i + 1}/${batches.length}`);
    
    const batchResults = await translateBatch(batches[i]);
    
    for (const result of batchResults) {
      if (result.translatedText && result.translatedText !== "") {
        if (!translations[result.textId]) {
          translations[result.textId] = {};
        }
        translations[result.textId][result.lang] = result.translatedText;
        translatedCount++;
      } else {
        errorCount++;
      }
    }

    if (i < batches.length - 1) {
      await sleep(config.delayBetweenBatches);
    }
  }

  langData.translations = translations;
  fs.writeFileSync(config.langFile, JSON.stringify(langData, null, 2), 'utf8');

  console.log('\n========================================');
  console.log(`‚úÖ –ü–ï–†–ï–í–û–î –ù–ê ${targetLang} –ó–ê–í–ï–†–®–ï–ù!`);
  console.log(`üìä –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: ${translatedCount}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–∞: ${errorCount}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—É—Å—Ç—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
function showEmptyTranslationsStatus() {
  console.log('üìä –°–¢–ê–¢–£–° –ü–£–°–¢–´–• –ü–ï–†–ï–í–û–î–û–í');
  console.log('========================================');

  const langData = readLangFile();
  const translations = langData.translations || {};

  const stats = {
    totalTexts: Object.keys(translations).length,
    emptyTranslations: 0,
    byLanguage: {}
  };

  for (const lang of config.targetLanguages) {
    stats.byLanguage[lang] = {
      empty: 0,
      total: 0
    };
  }

  for (const [textId, langTranslations] of Object.entries(translations)) {
    for (const lang of config.targetLanguages) {
      stats.byLanguage[lang].total++;
      if (langTranslations[lang] === "" || langTranslations[lang] === '""') {
        stats.byLanguage[lang].empty++;
        stats.emptyTranslations++;
      }
    }
  }

  console.log(`üìù –í—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤: ${stats.totalTexts}`);
  console.log(`‚ùå –ü—É—Å—Ç—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${stats.emptyTranslations}`);
  console.log('\nüåê –ü—É—Å—Ç—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –ø–æ —è–∑—ã–∫–∞–º:');
  
  for (const [lang, data] of Object.entries(stats.byLanguage)) {
    const percentage = ((data.empty / data.total) * 100).toFixed(1);
    console.log(`   ${lang}: ${data.empty} –ø—É—Å—Ç—ã—Ö –∏–∑ ${data.total} (${percentage}%)`);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –ø—É—Å—Ç—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
  console.log('\nüîç –ü—Ä–∏–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–æ–≤ —Å –ø—É—Å—Ç—ã–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏:');
  let examplesShown = 0;
  for (const [textId, langTranslations] of Object.entries(translations)) {
    if (examplesShown >= 5) break;
    
    const emptyLangs = config.targetLanguages.filter(lang => 
      langTranslations[lang] === "" || langTranslations[lang] === '""'
    );
    
    if (emptyLangs.length > 0) {
      console.log(`   "${textId.substring(0, 50)}..." - –ø—É—Å—Ç–æ –≤: ${emptyLangs.join(', ')}`);
      examplesShown++;
    }
  }

  console.log('========================================');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ø–µ—Ä–µ–≤–æ–¥–µ
function findMissingTranslations() {
  console.log('üîç –ü–û–ò–°–ö –ü–û–õ–ù–û–°–¢–¨–Æ –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–• –ü–ï–†–ï–í–û–î–û–í');
  console.log('========================================');

  const langData = readLangFile();
  const translations = langData.translations || {};

  const completelyMissing = [];

  for (const [textId, langTranslations] of Object.entries(translations)) {
    const missingLangs = config.targetLanguages.filter(lang => 
      !langTranslations[lang] || 
      langTranslations[lang] === "" || 
      langTranslations[lang] === '""'
    );

    if (missingLangs.length === config.targetLanguages.length) {
      completelyMissing.push(textId);
    }
  }

  if (completelyMissing.length === 0) {
    console.log('‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
    return;
  }

  console.log(`‚ùå –ù–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤ –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${completelyMissing.length}`);
  console.log('\nüìã –°–ø–∏—Å–æ–∫:');
  completelyMissing.forEach((textId, index) => {
    console.log(`   ${index + 1}. "${textId.substring(0, 60)}..."`);
  });
  console.log('========================================');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
async function handleCommandLineArgs() {
  const args = process.argv.slice(2);
  const command = args[0];

  try {
    switch (command) {
      case '--all':
      case '-a':
        await translateAll();
        break;
      
      case '--lang':
      case '-l':
        const targetLang = args[1];
        if (!targetLang) {
          console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: --lang en-US');
          process.exit(1);
        }
        if (!config.targetLanguages.includes(targetLang)) {
          console.log(`‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫. –î–æ—Å—Ç—É–ø–Ω—ã–µ: ${config.targetLanguages.join(', ')}`);
          process.exit(1);
        }
        await translateSpecificLanguage(targetLang);
        break;
      
      case '--status':
      case '-s':
        showEmptyTranslationsStatus();
        break;
      
      case '--missing':
      case '-m':
        findMissingTranslations();
        break;
      
      case '--help':
      case '-h':
      default:
        showHelp();
        break;
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
function showHelp() {
  console.log(`
üéØ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï: node translate-lang.js [–ö–û–ú–ê–ù–î–ê]

–ö–æ–º–∞–Ω–¥—ã:
  --all, -a              - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤—Å–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ ("")
  --lang, -l [–Ø–ó–´–ö]      - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —è–∑—ã–∫
  --status, -s           - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø—É—Å—Ç—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
  --missing, -m          - –ù–∞–π—Ç–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
  --help, -h             - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  node translate-lang.js --all
  node translate-lang.js --lang en-US
  node translate-lang.js --lang uk
  node translate-lang.js --status
  node translate-lang.js --missing

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:
  en-US - –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
  uk    - –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π
  es-ES - –ò—Å–ø–∞–Ω—Å–∫–∏–π
  ru    - –†—É—Å—Å–∫–∏–π
  `);
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  if (process.argv.length <= 2) {
    showHelp();
  } else {
    handleCommandLineArgs();
  }
}

module.exports = {
  translateAll,
  translateSpecificLanguage,
  showEmptyTranslationsStatus,
  findMissingTranslations
};