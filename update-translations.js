const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  jsFilesDir: './', // –ü–∞–ø–∫–∞ —Å JS —Ñ–∞–π–ª–∞–º–∏
  langFile: './config/lang.json', // –§–∞–π–ª —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
  textIdPatterns: [
    /textId:\s*"([^"]+)"/g,    // textId: "—Ç–µ–∫—Å—Ç"
    /textId:\s*'([^']+)'/g,    // textId: '—Ç–µ–∫—Å—Ç'
    /textId:\s*`([^`]+)`/g     // textId: `—Ç–µ–∫—Å—Ç`
  ]
};

// –ß—Ç–µ–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–Ω–≥ lang.json
function readLangFile() {
  try {
    const data = fs.readFileSync(config.langFile, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è lang.json:', error.message);
    return { translations: {} };
  }
}

// –ü–æ–∏—Å–∫ –≤—Å–µ—Ö JS —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function findJsFiles(dir) {
  const files = [];
  
  function traverseDirectory(currentDir) {
    const items = fs.readdirSync(currentDir);
    
    for (const item of items) {
      const fullPath = path.join(currentDir, item);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory()) {
        traverseDirectory(fullPath);
      } else if (item.endsWith('.js')) {
        files.push(fullPath);
      }
    }
  }
  
  traverseDirectory(dir);
  return files;
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ textId –∏–∑ JS —Ñ–∞–π–ª–æ–≤
function extractTextIdsFromFile(filePath) {
  const content = fs.readFileSync(filePath, 'utf8');
  const textIds = new Set();
  
  config.textIdPatterns.forEach(pattern => {
    let match;
    while ((match = pattern.exec(content)) !== null) {
      textIds.add(match[1]);
    }
  });
  
  return Array.from(textIds);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö textId –∏–∑ JS —Ñ–∞–π–ª–æ–≤
function getAllTextIdsFromJsFiles() {
  console.log('üîç –ü–æ–∏—Å–∫ JS —Ñ–∞–π–ª–æ–≤...');
  const jsFiles = findJsFiles(config.jsFilesDir);
  console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${jsFiles.length} JS —Ñ–∞–π–ª–æ–≤`);
  
  console.log('üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ textId –∏–∑ JS —Ñ–∞–π–ª–æ–≤...');
  const allTextIds = new Set();
  
  for (const file of jsFiles) {
    const textIds = extractTextIdsFromFile(file);
    textIds.forEach(id => allTextIds.add(id));
  }
  
  console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${allTextIds.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö textId –≤ JS —Ñ–∞–π–ª–∞—Ö`);
  return allTextIds;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
function addMissingTranslations(langData, jsTextIds) {
  const existingTranslations = langData.translations || {};
  const missingTextIds = Array.from(jsTextIds).filter(textId => 
    !existingTranslations[textId]
  );
  
  console.log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ lang.json: ${missingTextIds.length} textId`);
  
  if (missingTextIds.length === 0) {
    console.log('‚úÖ –í—Å–µ textId —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ lang.json');
    return 0;
  }
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö textId
  missingTextIds.forEach(textId => {
    existingTranslations[textId] = {
      "en-US": "",
      "uk": "",
      "es-ES": "",
      "ru": textId
    };
    console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω: "${textId}"`);
  });
  
  langData.translations = existingTranslations;
  return missingTextIds.length;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
function removeObsoleteTranslations(langData, jsTextIds) {
  const existingTranslations = langData.translations || {};
  const obsoleteTextIds = Object.keys(existingTranslations).filter(textId => 
    !jsTextIds.has(textId)
  );
  
  console.log(`üóëÔ∏è  –£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ lang.json: ${obsoleteTextIds.length}`);
  
  if (obsoleteTextIds.length === 0) {
    console.log('‚úÖ –£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    return 0;
  }
  
  // –£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö textId
  obsoleteTextIds.forEach(textId => {
    delete existingTranslations[textId];
    console.log(`‚ûñ –£–¥–∞–ª–µ–Ω: "${textId}"`);
  });
  
  langData.translations = existingTranslations;
  return obsoleteTextIds.length;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
function saveLangFile(langData) {
  fs.writeFileSync(config.langFile, JSON.stringify(langData, null, 2), 'utf8');
  console.log(`üíæ –§–∞–π–ª ${config.langFile} —Å–æ—Ö—Ä–∞–Ω–µ–Ω`);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
async function updateTranslations() {
  try {
    console.log('üîÑ –ó–ê–ü–£–°–ö –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ü–ï–†–ï–í–û–î–û–í (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö)');
    console.log('========================================');
    
    const jsTextIds = getAllTextIdsFromJsFiles();
    const langData = readLangFile();
    
    const addedCount = addMissingTranslations(langData, jsTextIds);
    
    if (addedCount > 0) {
      saveLangFile(langData);
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${addedCount}`);
    } else {
      console.log('‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
async function cleanTranslations() {
  try {
    console.log('üîÑ –ó–ê–ü–£–°–ö –û–ß–ò–°–¢–ö–ò –ü–ï–†–ï–í–û–î–û–í (—É–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö)');
    console.log('========================================');
    
    const jsTextIds = getAllTextIdsFromJsFiles();
    const langData = readLangFile();
    
    const removedCount = removeObsoleteTranslations(langData, jsTextIds);
    
    if (removedCount > 0) {
      saveLangFile(langData);
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${removedCount}`);
    } else {
      console.log('‚úÖ –£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤:', error);
    throw error;
  }
}

// –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
async function syncTranslations() {
  try {
    console.log('üîÑ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ü–ï–†–ï–í–û–î–û–í');
    console.log('========================================');
    
    const jsTextIds = getAllTextIdsFromJsFiles();
    const langData = readLangFile();
    
    const addedCount = addMissingTranslations(langData, jsTextIds);
    const removedCount = removeObsoleteTranslations(langData, jsTextIds);
    
    if (addedCount > 0 || removedCount > 0) {
      saveLangFile(langData);
      console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –¥–æ–±–∞–≤–ª–µ–Ω–æ ${addedCount}, —É–¥–∞–ª–µ–Ω–æ ${removedCount}`);
    } else {
      console.log('‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è - –ø–µ—Ä–µ–≤–æ–¥—ã —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function showStatistics() {
  try {
    console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ï–†–ï–í–û–î–û–í');
    console.log('========================================');
    
    const jsTextIds = getAllTextIdsFromJsFiles();
    const langData = readLangFile();
    const existingTranslations = langData.translations || {};
    
    const missingCount = Array.from(jsTextIds).filter(textId => !existingTranslations[textId]).length;
    const obsoleteCount = Object.keys(existingTranslations).filter(textId => !jsTextIds.has(textId)).length;
    
    console.log(`üìÅ JS —Ñ–∞–π–ª—ã: ${findJsFiles(config.jsFilesDir).length} —Ñ–∞–π–ª–æ–≤`);
    console.log(`üî§ TextId –≤ JS: ${jsTextIds.size}`);
    console.log(`üìñ –ü–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ lang.json: ${Object.keys(existingTranslations).length}`);
    console.log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${missingCount}`);
    console.log(`üóëÔ∏è  –£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${obsoleteCount}`);
    console.log('========================================');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    throw error;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
async function handleCommandLineArgs() {
  const args = process.argv.slice(2);
  const command = args[0];

  try {
    switch (command) {
      case '--add':
      case '-a':
        await updateTranslations();
        break;
      
      case '--clean':
      case '-c':
        await cleanTranslations();
        break;
      
      case '--sync':
      case '-s':
        await syncTranslations();
        break;
      
      case '--stats':
      case '-st':
        await showStatistics();
        break;
      
      case '--help':
      case '-h':
      default:
        showHelp();
        break;
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
function showHelp() {
  console.log(`
üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node update-translations.js [–ö–û–ú–ê–ù–î–ê]

–ö–æ–º–∞–Ω–¥—ã:
  --add, -a     - –î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
  --clean, -c   - –£–¥–∞–ª–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
  --sync, -s    - –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–¥–æ–±–∞–≤–∏—Ç—å + —É–¥–∞–ª–∏—Ç—å)
  --stats, -st  - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  --help, -h    - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  node update-translations.js --add
  node update-translations.js --clean
  node update-translations.js --sync
  node update-translations.js --stats
  `);
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  if (process.argv.length <= 2) {
    showHelp();
  } else {
    handleCommandLineArgs();
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = {
  updateTranslations,
  cleanTranslations,
  syncTranslations,
  showStatistics
};